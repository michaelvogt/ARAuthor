material {
    "name" : "View",
    "defines" : [
      "baseColor"
    ],
    "parameters" : [
      {
        "type" : "samplerExternal",
        "name" : "viewTexture"
      }, {
        type: "float",
        name: "fadeInWidth"
      }, {
        type: "float",
        name: "fadeOutWidth"
      }
    ],
    "requires" : [
        "position",
        "uv0"
    ],
    "shadingModel" : "unlit",
    "blending" : "transparent",
    "doubleSided" : true
}

fragment {
    void material(inout MaterialInputs material) {
        prepareMaterial(material);

        vec2 uv = getUV0();

        if (!gl_FrontFacing) {
          uv.x = 1.0 - uv.x;
        }

        material.baseColor = texture(materialParams_viewTexture, uv);
        material.baseColor.rgb = inverseTonemapSRGB(material.baseColor.rgb);
        material.baseColor.a *=
         uv.x < materialParams.fadeInWidth ? (uv.x / materialParams.fadeInWidth)
         : uv.x > (1.0 - materialParams.fadeOutWidth) ? ((1.0 - uv.x) / materialParams.fadeOutWidth)
         : 1.0;
    }
}